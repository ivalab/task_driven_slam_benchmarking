<launch>
  <arg name="use_provided_manager" default="false" />
  <arg name="provided_manager" default=""/>
  <arg name="nodelet_manager" default="mobile_base_nodelet_manager" unless="$(arg use_provided_manager)" />
  <arg name="nodelet_manager" value="$(arg provided_manager)" if="$(arg use_provided_manager)" />
  <arg name="respawn" default="true" />

  <arg name="serialport" value="/dev/kobuki"/> 
  <arg name="base" value="kobuki"/>
  <arg name="stacks" value="hexagons"/>
  <arg name="3d_sensor" value="kinect"/>

  <arg name="driver" default="true"/>


  <group if="$(arg driver)">
    
  <!-- Kobuki base -->
  <node pkg="nodelet" type="nodelet" name="$(arg nodelet_manager)" args="manager" respawn="$(arg respawn)" unless="$(arg use_provided_manager)"/>
  <node pkg="nodelet" type="nodelet" name="mobile_base" args="load kobuki_node/KobukiNodelet $(arg nodelet_manager)">
    <rosparam file="$(find kobuki_node)/param/base.yaml" command="load"/>
    <param name="device_port" value="$(arg serialport)" />
    <param name="publish_tf" value="true"/>
    <remap from="mobile_base/odom" to="odom"/>
    <remap from="mobile_base/enable" to="enable"/>
    <remap from="mobile_base/disable" to="disable"/>
    <remap from="mobile_base/joint_states" to="joint_states"/>
  </node>
  
  
  <!-- velocity commands multiplexer -->
  <!-- if I need to change anything, I'll make my own parameter file -->
  <node pkg="nodelet" type="nodelet" name="cmd_vel_mux" args="load yocs_cmd_vel_mux/CmdVelMuxNodelet $(arg nodelet_manager)" respawn="$(arg respawn)">
    <param name="yaml_cfg_file" value="$(find turtlebot_roboslam)/params/mux.yaml"/>
    <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
  </node>


  <!-- safety controller -->
  <!-- None of these look like they would need to be adjusted -->
  <node pkg="nodelet" type="nodelet" name="navigation_safety_controller" args="load kobuki_safety_controller/SafetyControllerNodelet $(arg nodelet_manager)" respawn="$(arg respawn)">
    <remap from="navigation_safety_controller/cmd_vel"           to="cmd_vel_mux/input/safety_controller"/>
    <remap from="navigation_safety_controller/events/bumper"     to="mobile_base/events/bumper"/>
    <remap from="navigation_safety_controller/events/cliff"      to="mobile_base/events/cliff"/>
    <remap from="navigation_safety_controller/events/wheel_drop" to="mobile_base/events/wheel_drop"/>
  </node>
  
  <!-- bumper 2 pointcloud -->
  <node pkg="nodelet" type="nodelet" name="bumper2pointcloud" args="load kobuki_bumper2pc/Bumper2PcNodelet $(arg nodelet_manager)" respawn="$(arg respawn)">
    <param name="pointcloud_radius" value="0.24"/>
    <remap from="bumper2pointcloud/pointcloud"   to="mobile_base/sensors/bumper_pointcloud"/>
    <remap from="bumper2pointcloud/core_sensors" to="mobile_base/sensors/core"/>
  </node>
  
  </group>

  <group unless="$(arg driver)">

  <node pkg="tf" type="static_transform_publisher" name="odom_publisher" args="0 0 0 0 0 0 1 odom base_footprint 100" respawn="$(arg respawn)"/>


  </group>

  <!-- Robot description -->
<!--  <arg name="urdf_file" default="$(find xacro)/xacro.py '$(find turtlebot_description)/robots/$(arg base)_$(arg stacks)_$(arg 3d_sensor).urdf.xacro'" /> -->
   <arg name="urdf_file" default="$(find xacro)/xacro '$(find closedloop_nav_slam)/configs/urdf/realworld/kobuki_hexagons_laser_d435i.urdf.xacro'" /> 
  <param name="robot_description" command="$(arg urdf_file)" />  
  
  
  <!-- Robot state publisher-->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher" respawn="$(arg respawn)">
    <param name="publish_frequency" type="double" value="20.0" />
    <param name="use_tf_static" type="bool" value="true" />
  </node>


  <arg name="remove_prefixes" value="$(eval '[' + nodelet_manager[:nodelet_manager.rfind('/')] + ',' + nodelet_manager[nodelet_manager.rfind('/')+1:] + ']')"/>

  <!-- Diagnostic Aggregation-->
<!--
  <node pkg="diagnostic_aggregator" type="aggregator_node" name="diagnostic_aggregator" respawn="$(arg respawn)">
    <rosparam command="load" file="$(find odroid)/param/$(arg base)/diagnostics.yaml" subst_value="true"/>
    <rosparam command="load" file="$(find odroid)/param/odroid_diagnostics.yaml" />

  </node>
  <param name="/garbage" value="$(eval [nodelet_manager[:nodelet_manager.rfind('/')],nodelet_manager[nodelet_manager.rfind('/')+1:]])"/>
  <param name="/garbage3" value="$(eval '[' + nodelet_manager[:nodelet_manager.rfind('/')] + ',' + nodelet_manager[nodelet_manager.rfind('/')+1:] + ']')"/>
<param name="/garbage2" value="$(eval nodelet_manager)"/>
  -->
</launch>
