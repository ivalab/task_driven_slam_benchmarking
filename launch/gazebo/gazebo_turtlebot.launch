<launch>

  <!-- tsrb fourth floor meta data BEGIN -->
  <arg name="world_file" default="$(find closedloop_nav_slam)/configs/world/fourth_floor_stixel.world"/>
  <arg name="map_file" default="$(find closedloop_nav_slam)/configs/map/tsrb/fourth_floor_gazebo.yaml"/>
  <arg name = "start_x" default="34"/>
  <arg name = "start_y" default="-6"/>
  <arg name = "start_z" default="0"/>
  <arg name = "start_yaw" default="0"/>
  <!-- tsrb fourth floor meta data END -->

  <!-- classroom meta data BEGIN -->
  <!-- <arg name="world_file" default="$(find closedloop_nav_slam)/configs/world/classroom_textured_collid.world"/>
  <arg name="map_file" default="$(find closedloop_nav_slam)/configs/map/classroom/classroom_textured.yaml"/>
  <arg name = "start_x" default="9"/>
  <arg name = "start_y" default="-5"/>
  <arg name = "start_z" default="0"/>
  <arg name = "start_yaw" default="3.14159265359"/> -->
  <!-- classroom meta data END -->

  <arg name="gui" default="true"/>
  <!-- <arg name="mode" default="localization"/> -->


  <!--BEGIN turtlebot_gazebo turtlebot_world.launch -->
    <!--BEGIN gazebo_ros empty_world.launch-->
      <!-- these are the arguments you can pass this launch file, for example paused:=true -->
      <arg name="paused" default="false"/>
      <arg name="use_sim_time" default="true"/>
      <arg name="extra_gazebo_args" default=""/>
      <arg name="recording" default="false"/>
      <!-- Note that 'headless' is currently non-functional.  See gazebo_ros_pkgs issue #491 (-r arg does not disable
           rendering, but instead enables recording). The arg definition has been left here to prevent breaking downstream
           launch files, but it does nothing. -->
      <arg name="headless" default="false"/>
      <arg name="debug" default="false"/>
      <arg name="physics" default="ode"/>
      <arg name="verbose" default="true"/>
      <arg name="respawn_gazebo" default="false"/>
      <arg name="use_clock_frequency" default="false"/>
      <arg name="pub_clock_frequency" default="100"/>

      <!-- set use_sim_time flag -->
      <param name="/use_sim_time" value="true" />

      <!-- set command arguments -->
      <arg unless="$(arg paused)" name="command_arg1" value=""/>
      <arg     if="$(arg paused)" name="command_arg1" value="-u"/>
      <arg unless="$(arg recording)" name="command_arg2" value=""/>
      <arg     if="$(arg recording)" name="command_arg2" value="-r"/>
      <arg unless="$(arg verbose)" name="command_arg3" value=""/>
      <arg     if="$(arg verbose)" name="command_arg3" value="--verbose"/>
      <arg unless="$(arg debug)" name="script_type" value="gzserver"/>
      <arg     if="$(arg debug)" name="script_type" value="debug"/>

      <!-- start gazebo server-->
      <group if="$(arg use_clock_frequency)">
        <param name="gazebo/pub_clock_frequency" value="$(arg pub_clock_frequency)" />
      </group>
      <node name="gazebo" pkg="gazebo_ros" type="$(arg script_type)" respawn="$(arg respawn_gazebo)" output="screen"
	    args="$(arg command_arg1) $(arg command_arg2) $(arg command_arg3) -e $(arg physics) $(arg extra_gazebo_args) $(arg world_file)" required="true">

      </node>
	
      <!-- start gazebo client -->
      <group if="$(arg gui)">
        <node name="gazebo_gui" pkg="gazebo_ros" type="gzclient" respawn="false" output="screen"/>
      </group>

    <!--END gazebo_ros empty_world.launch-->

    <!--BEGIN turtlebot_gazebo kobuki.launch.xml-->
    
      <arg name="urdf_file" default="$(find xacro)/xacro '$(find closedloop_nav_slam)/configs/urdf/gazebo/kobuki_hexagons_fisheye_stereo_mpu_6000_laser.urdf.xacro'" />
    
      <param name="robot_description" command="$(arg urdf_file)" />
      
      <!-- Gazebo model spawner  -->
      <node name="spawn_turtlebot_model" pkg="gazebo_ros" type="spawn_model"
            args="-x $(arg start_x) -y $(arg start_y) -z $(arg start_z) -Y $(arg start_yaw) -unpause -urdf -param robot_description -model mobile_base"/>
            
      <!-- Velocity muxer -->
      <node pkg="nodelet" type="nodelet" name="mobile_base_nodelet_manager" args="manager"  required="true"/>
      <node pkg="nodelet" type="nodelet" name="cmd_vel_mux"
            args="load yocs_cmd_vel_mux/CmdVelMuxNodelet mobile_base_nodelet_manager"  required="true">
        <param name="yaml_cfg_file" value="$(find turtlebot_bringup)/param/mux.yaml" />
        <remap from="cmd_vel_mux/output" to="mobile_base/commands/velocity"/>
      </node>

      <!-- Bumper/cliff to pointcloud (not working, as it needs sensors/core messages) -->
      <include file="$(find turtlebot_bringup)/launch/includes/kobuki/bumper2pc.launch.xml"/>

    <!--END turtlebot_gazebo kobuki.launch.xml-->


    
    <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher"  required="true">
      <param name="publish_frequency" type="double" value="30.0" />
      <param name="tf_prefix" value="groundtruth"/>
    </node>
    

  <!--END turtlebot_gazebo turtlebot_world.launch -->
  <node name="map" pkg="map_server" type="map_server" args="$(arg map_file)" required="true">
  </node>

  <node name="map_odom_publisher" pkg="gazebo_fake_localization" type="gazebo_fake_localization" required="true" launch-prefix="">
    <param name="odom_frame_id" value="odom"/>
    <param name="base_frame_id" value="groundtruth/base_footprint"/>
  </node>

<!-- downsample the imu message in gazebo; no need in real turtlebot; there might be warning on msf_core: imu message drop: simply ignore that! -->
<node pkg="topic_tools" type="throttle" name="imu_downsample" args=" messages /mobile_base/sensors/imu_data 100 /imu0">
</node>

<!-- downsample the odom message to be logged in rosbag; no need in real turtlebot;  -->
<node pkg="topic_tools" type="throttle" name="odom_downsample" args=" messages /odom 50 /odom_sparse">
</node>

</launch>
